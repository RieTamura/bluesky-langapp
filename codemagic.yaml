workflows:
  ios-testflight:
    name: iOS TestFlight (Expo prebuild + Xcode + auto signing)
    max_build_duration: 120
    instance_type: mac_mini_m2

    integrations:
      app_store_connect: "Graspo2"

    environment:
      groups:
        - appstore_credentials

      vars:
        BUNDLE_ID: com.rietamura.graspo
        APP_PATH: mobile

    scripts:
      - name: Print versions and install JS deps (mobile/)
        script: |
          node -v
          npm -v
          pushd "$APP_PATH"
          npm ci
          npm run lint --if-present
          npm run test --if-present
          popd

      - name: Expo prebuild (iOS on macOS runner, in mobile/)
        script: |
          set -e
          pushd "$APP_PATH"
          npx expo prebuild --platform ios --non-interactive --clean
          popd

      - name: Install CocoaPods (mobile/ios)
        script: |
          set -e
          pushd "$APP_PATH/ios"
          pod repo update
          pod install
          popd

      - name: Initialize keychain and fetch/create signing files (automatic)
        script: |

          set -euo pipefail



          # Initialize keychain for importing certificates

          keychain initialize

          # Optionally pass certificate private key so CLI can create/use a matching Apple Distribution certificate
          CERT_KEY_ARG=""
          if [ -n "${CERTIFICATE_PRIVATE_KEY:-}" ]; then
            CERT_KEY_ARG="--certificate-key \"$CERTIFICATE_PRIVATE_KEY\""
          fi

          # Fetch or create signing files (App Store)
          app-store-connect fetch-signing-files "$BUNDLE_ID" \

            --type IOS_APP_STORE \

            --create \

            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \

            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \

            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \

            ${CERT_KEY_ARG}

          # Import downloaded certificates to keychain
          keychain add-certificates

      - name: Apply signing profiles to Xcode project
        script: |
          set -e
          pushd "$APP_PATH/ios"
          xcode-project use-profiles
          popd

      - name: Detect workspace and scheme (under mobile/ios)
        script: |

          set -euo pipefail

          WORKSPACE=$(ls -1d "$APP_PATH"/ios/*.xcworkspace | head -n 1 || true)


          if [ -z "${WORKSPACE:-}" ]; then
            echo "No .xcworkspace found under $APP_PATH/ios"
            exit 1
          fi

          xcodebuild -list -json -workspace "$WORKSPACE" > xclist.json
          SCHEME=$(python3 -c 'import json; d=json.load(open("xclist.json")); s=(d.get("workspace",{}).get("schemes") or d.get("project",{}).get("schemes") or []); print(s[0] if s else "")')

          if [ -z "${SCHEME:-}" ]; then
            echo "No Xcode scheme detected"
            exit 1
          fi

          echo "Detected workspace: $WORKSPACE"

          echo "Detected scheme: $SCHEME"


          # Persist for downstream steps in Codemagic
          echo "XCODE_WORKSPACE=$WORKSPACE" >> $CM_ENV
          echo "XCODE_SCHEME=$SCHEME" >> $CM_ENV

      - name: Build iOS app for release
        script: |

          set -euo pipefail

          pushd "$APP_PATH/ios"


          xcodebuild \

            -workspace "$XCODE_WORKSPACE" \

            -scheme "$XCODE_SCHEME" \

            -configuration Release \

            -archivePath "$CM_BUILD_DIR/Graspo.xcarchive" \

            archive CODE_SIGN_STYLE=Manual

          popd

      - name: Export IPA
        script: |
          set -euo pipefail
          xcode-project build-ipa --archive-path "$CM_BUILD_DIR/Graspo.xcarchive"

    artifacts:
      - $CM_BUILD_DIR/*.ipa
      - $CM_BUILD_DIR/*.dSYM.zip

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
